Telehealth project by Grok

Thank you for the opportunity to collaborate as your co-pilot on this FHIR-integrated telehealth API and patient portal project. I understand your goal is to create a high-leverage, standout portfolio project that showcases your skills as an ASP.NET Core full-stack developer specializing in healthcare IT, with a focus on FHIR, security, and interoperability. You want a detailed specification that avoids "vibe coding" (i.e., vague, unstructured development) and provides granular, actionable steps to minimize follow-up questions. I’ll outline a comprehensive specification, breaking down each component into detailed requirements, technologies, and implementation steps, ensuring it’s a “winner” for your portfolio and aligned with your career goals in healthcare IT.

We’ll design a **FHIR-Integrated Secure Mini-Telehealth API and Patient Portal** that demonstrates your ability to build a secure, scalable, and interoperable healthcare application using ASP.NET Core. The project will prioritize FHIR for data exchange, robust security for Protected Health Information (PHI), and a user-friendly patient portal, all while showcasing enterprise-grade practices to impress potential employers. I’ll guide you through each step, providing clear reasoning, code structures, and best practices, and we’ll work together iteratively to ensure clarity and alignment.

---

### Project Specification: FHIR-Integrated Secure Mini-Telehealth API and Patient Portal

#### 1. Project Overview
- **Objective**: Build a secure, FHIR-compliant telehealth API and patient portal using ASP.NET Core. The API will handle appointment scheduling, secure video call initiation, and FHIR-based data exchange (e.g., patient demographics, appointments). The patient portal will allow users to view their data, schedule appointments, and join telehealth sessions, demonstrating full-stack capabilities and healthcare domain expertise.
- **Target Audience**: Healthcare IT recruiters, FHIR developers, and potential employers seeking remote ASP.NET Core developers with healthcare specialization.
- **Key Features**:
  - **API**: RESTful API for managing patients, appointments, and telehealth sessions, integrated with a FHIR server for interoperability.
  - **Patient Portal**: A Blazor-based web interface for patients to interact with their data and telehealth features.
  - **Security**: HIPAA-compliant security measures (e.g., encryption, authentication, audit logging).
  - **FHIR Integration**: Connect to a test FHIR server (e.g., HAPI FHIR) to store and retrieve patient and appointment data.
- **Technologies**:
  - **Backend**: ASP.NET Core 8.0 (LTS) with C# for API development.
  - **Frontend**: Blazor Server for the patient portal (chosen for its integration with ASP.NET Core and suitability for secure, real-time healthcare apps).
  - **Database**: SQL Server (via Entity Framework Core) for local data, with FHIR server for interoperable data.
  - **FHIR Server**: HAPI FHIR (open-source, widely used) for testing FHIR resources.
  - **Security**: ASP.NET Core Identity for authentication, JWT for API security, AES encryption for PHI.
  - **Cloud (Optional)**: Azure Health Data Services for future scalability (noted but not required for initial portfolio).
  - **Other**: SignalR for real-time telehealth session notifications, Serilog for audit logging.
- **Success Criteria**:
  - Fully functional API and portal with secure, FHIR-compliant data exchange.
  - Clean, documented code hosted on GitHub with a detailed README.
  - Demonstrates healthcare domain knowledge, security best practices, and modern development techniques.
  - Deployable to a local or cloud environment for demo purposes.

---

### 2. Detailed Requirements

#### 2.1 Functional Requirements
1. **Patient Management**:
   - Create, read, update, and delete (CRUD) patient profiles using FHIR `Patient` resources.
   - Store minimal local patient data (e.g., ID, name, email) in SQL Server, syncing with FHIR server.
   - Support patient registration and profile updates via the portal.
2. **Appointment Scheduling**:
   - Allow patients to schedule, view, and cancel telehealth appointments via the portal.
   - Store appointments as FHIR `Appointment` resources on the FHIR server.
   - Support basic scheduling logic (e.g., prevent double-booking).
3. **Telehealth Session Initiation**:
   - Generate secure, time-limited links for video calls (simulated using SignalR for real-time notifications).
   - Allow patients to join sessions from the portal.
   - Log session start/end times for audit purposes.
4. **FHIR Integration**:
   - Connect to a HAPI FHIR server to store/retrieve `Patient` and `Appointment` resources.
   - Implement RESTful API endpoints to interact with FHIR resources (e.g., GET `/fhir/patient/{id}`).
   - Handle FHIR resource validation and error handling.
5. **Patient Portal**:
   - Display patient profile, appointment history, and upcoming telehealth sessions.
   - Provide a form to schedule new appointments.
   - Include a “Join Session” button to simulate entering a telehealth call.
6. **Security and Compliance**:
   - Authenticate users (patients) using ASP.NET Core Identity with email/password.
   - Secure API endpoints with JWT bearer tokens.
   - Encrypt PHI in transit (HTTPS) and at rest (AES-256 for sensitive fields in SQL Server).
   - Implement audit logging for all PHI access and modifications.
7. **Documentation**:
   - Provide a GitHub README detailing the project’s purpose, setup, architecture, FHIR integration, and security measures.
   - Include API documentation (e.g., Swagger/OpenAPI).

#### 2.2 Non-Functional Requirements
- **Performance**: API response times under 200ms for typical requests (e.g., GET patient data).
- **Scalability**: Design for potential future growth (e.g., modular code, database indexing).
- **Security**: Adhere to HIPAA principles (confidentiality, integrity, availability of PHI).
- **Usability**: Patient portal should be intuitive, with responsive design for desktop/mobile.
- **Maintainability**: Follow clean code principles, SOLID design, and include unit tests for critical components.
- **Portability**: Runnable locally or deployable to Azure for demo purposes.

---

### 3. System Architecture

#### 3.1 High-Level Architecture
- **Client Layer**: Blazor Server web app for the patient portal, hosted in ASP.NET Core.
- **API Layer**: RESTful API built with ASP.NET Core, handling business logic and FHIR integration.
- **Data Layer**:
  - Local SQL Server database for non-FHIR data (e.g., user accounts, session logs).
  - HAPI FHIR server for FHIR resources (`Patient`, `Appointment`).
- **Integration Layer**: HTTP client to interact with HAPI FHIR server via REST APIs.
- **Security Layer**: ASP.NET Core Identity, JWT, AES encryption, Serilog for audit logging.
- **Real-Time Layer**: SignalR for telehealth session notifications.

#### 3.2 Data Flow
1. Patient logs into the portal (Blazor) using ASP.NET Core Identity.
2. Portal calls API to fetch patient data (local DB + FHIR `Patient` resource).
3. Patient schedules an appointment via the portal, which sends a request to the API.
4. API validates the request, creates a FHIR `Appointment` resource, and stores it on the HAPI FHIR server.
5. API stores minimal appointment metadata in SQL Server and logs the action.
6. For telehealth sessions, API generates a session link, notifies the patient via SignalR, and logs session activity.

---

### 4. Detailed Implementation Plan

#### 4.1 Project Setup
- **Step 1: Create Solution Structure**
  - Create a new ASP.NET Core solution named `TelehealthApi` using Visual Studio or CLI:
    ```bash
    dotnet new sln -n TelehealthApi
    ```
  - Add projects for separation of concerns:
    - `TelehealthApi.Web` (Blazor Server for patient portal).
    - `TelehealthApi.Api` (ASP.NET Core Web API).
    - `TelehealthApi.Core` (Shared models, services, interfaces).
    - `TelehealthApi.Tests` (Unit tests).
    ```bash
    dotnet new blazorserver -n TelehealthApi.Web
    dotnet new webapi -n TelehealthApi.Api
    dotnet new classlib -n TelehealthApi.Core
    dotnet new xunit -n TelehealthApi.Tests
    dotnet sln add TelehealthApi.Web TelehealthApi.Api TelehealthApi.Core TelehealthApi.Tests
    ```
  - Add project references:
    - `TelehealthApi.Web` references `TelehealthApi.Core`.
    - `TelehealthApi.Api` references `TelehealthApi.Core`.
  - Install NuGet packages:
    ```bash
    dotnet add package Microsoft.EntityFrameworkCore.SqlServer --version 8.0.8
    dotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore --version 8.0.8
    dotnet add package Hl7.Fhir.R4 --version 5.10.2
    dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer --version 8.0.8
    dotnet add package Microsoft.AspNetCore.SignalR --version 8.0.8
    dotnet add package Serilog.AspNetCore --version 8.0.2
    dotnet add package Microsoft.EntityFrameworkCore.Design --version 8.0.8
    ```

- **Step 2: Set Up HAPI FHIR Server**
  - Use a public HAPI FHIR test server (e.g., `http://hapi.fhir.org/baseR4`) for development.
  - Alternatively, run a local HAPI FHIR server using Docker:
    ```bash
    docker run -p 8080:8080 hapiproject/hapi:latest
    ```
  - Test connectivity using Postman or cURL:
    ```bash
    curl http://hapi.fhir.org/baseR4/Patient
    ```

- **Step 3: Configure SQL Server**
  - Install SQL Server Express or use a cloud-hosted instance (e.g., Azure SQL).
  - Create a database named `TelehealthDb`:
    ```sql
    CREATE DATABASE TelehealthDb;
    ```

#### 4.2 Database Design
- **Local Database (SQL Server)**:
  - **Users Table** (via ASP.NET Core Identity):
    - Columns: `Id` (string, PK), `UserName` (string), `Email` (string), `PasswordHash` (string), etc.
  - **Patients Table**:
    - Columns: `Id` (Guid, PK), `FhirPatientId` (string, FK to FHIR `Patient`), `Email` (string, unique), `EncryptedName` (string, AES-encrypted).
  - **Appointments Table**:
    - Columns: `Id` (Guid, PK), `FhirAppointmentId` (string, FK to FHIR `Appointment`), `PatientId` (Guid, FK), `StartTime` (DateTime), `EndTime` (DateTime), `Status` (string).
  - **AuditLogs Table**:
    - Columns: `Id` (Guid, PK), `UserId` (string), `Action` (string), `Timestamp` (DateTime), `Details` (string).
- **FHIR Resources**:
  - `Patient`: Store name, birth date, contact info (email).
  - `Appointment`: Store start/end times, patient reference, status.
- **Entity Framework Core Setup**:
  - Create a `TelehealthDbContext` in `TelehealthApi.Core`:
    
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace TelehealthApi.Core
{
    public class TelehealthDbContext : IdentityDbContext
    {
        public TelehealthDbContext(DbContextOptions<TelehealthDbContext> options) : base(options) { }

        public DbSet<Patient> Patients { get; set; }
        public DbSet<Appointment> Appointments { get; set; }
        public DbSet<AuditLog> AuditLogs { get; set; }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            builder.Entity<Patient>()
                .HasIndex(p => p.FhirPatientId) // Keep this unique
		.IsUnique();
   	 builder.Entity<Patient>()
        .HasIndex(p => new { p.Email, p.FhirPatientId }); // Composite index for email lookups, email for patient is a contact point only as per FHIR
        }
    }

    public class Patient
    {
        public Guid Id { get; set; }
        public string FhirPatientId { get; set; }
        public string Email { get; set; }
        public string EncryptedName { get; set; }
    }

    public class Appointment
    {
        public Guid Id { get; set; }
        public string FhirAppointmentId { get; set; }
        public Guid PatientId { get; set; }
        public DateTime StartTime { get; set; }
        public DateTime EndTime { get; set; }
        public string Status { get; set; }
    }

    public class AuditLog
    {
        public Guid Id { get; set; }
        public string UserId { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }
        public string Details { get; set; }
    }
}
    
  - Configure in `TelehealthApi.Api` (`Program.cs`):
    ```csharp
    builder.Services.AddDbContext<TelehealthDbContext>(options =>
        options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));
    ```

#### 4.3 API Development
- **Step 1: Create API Endpoints**
  - Project: `TelehealthApi.Api`.
  - Structure controllers for clarity:
    - `PatientsController`: Handles patient CRUD.
    - `AppointmentsController`: Handles appointment scheduling.
    - `TelehealthController`: Manages session links.
  - Example endpoint (`PatientsController`):
    
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Hl7.Fhir.Model;
using Hl7.Fhir.Rest;

namespace TelehealthApi.Api.Controllers
{
    [Authorize]
    [ApiController]
    [Route("api/[controller]")]
    public class PatientsController : ControllerBase
    {
        private readonly IFhirService _fhirService;
        private readonly TelehealthDbContext _dbContext;
        private readonly ILogger<PatientsController> _logger;

        public PatientsController(IFhirService fhirService, TelehealthDbContext dbContext, ILogger<PatientsController> logger)
        {
            _fhirService = fhirService;
            _dbContext = dbContext;
            _logger = logger;
        }

        [HttpGet("{id}")]
        public async Task<IActionResult> GetPatient(string id)
        {
            var patient = await _fhirService.GetPatientAsync(id);
            if (patient == null) return NotFound();
            _logger.LogInformation("Accessed patient {Id} by user {UserId}", id, User.Identity.Name);
            return Ok(patient);
        }

        [HttpPost]
        public async Task<IActionResult> CreatePatient([FromBody] PatientInput input)
        {
            var fhirPatient = new Patient
            {
                Name = new List<HumanName> { new HumanName { Family = input.LastName, Given = new[] { input.FirstName } } },
                BirthDate = input.BirthDate,
                Telecom = new List<ContactPoint> { new ContactPoint { System = ContactPoint.ContactPointSystem.Email, Value = input.Email } }
            };
            var createdPatient = await _fhirService.CreatePatientAsync(fhirPatient);
            var localPatient = new Core.Patient
            {
                Id = Guid.NewGuid(),
                FhirPatientId = createdPatient.Id,
                Email = input.Email,
                EncryptedName = EncryptName($"{input.FirstName} {input.LastName}")
            };
            _dbContext.Patients.Add(localPatient);
            await _dbContext.SaveChangesAsync();
            _logger.LogInformation("Created patient {Id} by user {UserId}", createdPatient.Id, User.Identity.Name);
            return CreatedAtAction(nameof(GetPatient), new { id = createdPatient.Id }, createdPatient);
        }

        private string EncryptName(string name)
        {
            // Implement AES-256 encryption (see Security section)
            return name; // Placeholder
        }
    }

    public class PatientInput
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string BirthDate { get; set; }
        public string Email { get; set; }
    }
}
    
- **Step 2: FHIR Integration**
  - Create an `IFhirService` interface and implementation in `TelehealthApi.Core`:
    
using Hl7.Fhir.Model;
using Hl7.Fhir.Rest;

namespace TelehealthApi.Core
{
    public interface IFhirService
    {
        Task<Patient> GetPatientAsync(string id);
        Task<Patient> CreatePatientAsync(Patient patient);
        Task<Appointment> CreateAppointmentAsync(Appointment appointment);
    }

    public class FhirService : IFhirService
    {
        private readonly FhirClient _fhirClient;

        public FhirService(IConfiguration configuration)
        {
            _fhirClient = new FhirClient(configuration["FhirServer:Url"]);
        }

        public async Task<Patient> GetPatientAsync(string id)
        {
            return await _fhirClient.ReadAsync<Patient>($"Patient/{id}");
        }

        public async Task<Patient> CreatePatientAsync(Patient patient)
        {
            return await _fhirClient.CreateAsync(patient);
        }

        public async Task<Appointment> CreateAppointmentAsync(Appointment appointment)
        {
            return await _fhirClient.CreateAsync(appointment);
        }
    }
}
    
  - Configure in `Program.cs`:
    ```csharp
    builder.Services.AddSingleton<IFhirService, FhirService>();
    ```

#### 4.4 Patient Portal Development
- **Step 1: Set Up Blazor Server**
  - In `TelehealthApi.Web`, configure Blazor with SignalR:
    ```csharp
    builder.Services.AddSignalR();
    ```
  - Update `Program.cs` to include Identity and Razor pages:
    ```csharp
    builder.Services.AddRazorPages();
    builder.Services.AddServerSideBlazor();
    builder.Services.AddHttpClient();
    builder.Services.AddAuthentication().AddIdentityCookies();
    ```
- **Step 2: Create Patient Portal Pages**
  - Create a `Pages/PatientPortal` folder with Razor components:
    - `Profile.razor`: Displays patient data.
    - `Appointments.razor`: Lists appointments and allows scheduling.
    - `Telehealth.razor`: Shows session links.
  - Example (`Profile.razor`):
    ```html
@page "/patient/profile"
@inject HttpClient Http
@inject AuthenticationStateProvider AuthState
@using Hl7.Fhir.Model

<h3>My Profile</h3>

@if (patient == null)
{
    <p>Loading...</p>
}
else
{
    <p>Name: @patient.Name.First().Family, @patient.Name.First().Given.First()</p>
    <p>Email: @patient.Telecom.First(t => t.System == ContactPoint.ContactPointSystem.Email).Value</p>
    <p>Birth Date: @patient.BirthDate</p>
}

@code {
    private Patient patient;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthState.GetAuthenticationStateAsync();
        var userId = authState.User.Identity.Name;
        var response = await Http.GetFromJsonAsync<Patient>($"api/patients/{userId}");
        patient = response;
    }
}
    ```

#### 4.5 Security Implementation
- **Authentication**:
  - Configure ASP.NET Core Identity in `Program.cs`:
    ```csharp
    builder.Services.AddIdentity<IdentityUser, IdentityRole>()
        .AddEntityFrameworkStores<TelehealthDbContext>()
        .AddDefaultTokenProviders();
    ```
  - Add JWT for API:
    ```csharp
    builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
        .AddJwtBearer(options =>
        {
            options.TokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = builder.Configuration["Jwt:Issuer"],
                ValidAudience = builder.Configuration["Jwt:Audience"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(builder.Configuration["Jwt:Key"]))
            };
        });
    ```
- **Encryption**:
  - Use AES-256 to encrypt PHI (e.g., patient names) before storing in SQL Server:
    
using System.Security.Cryptography;
using System.Text;

namespace TelehealthApi.Core
{
    public class EncryptionService
    {
        private readonly byte[] _key;
        private readonly byte[] _iv;

        public EncryptionService(IConfiguration configuration)
        {
            _key = Encoding.UTF8.GetBytes(configuration["Encryption:Key"].PadRight(32));
            _iv = Encoding.UTF8.GetBytes(configuration["Encryption:IV"].PadRight(16));
        }

        public string Encrypt(string input)
        {
            using var aes = Aes.Create();
            aes.Key = _key;
            aes.IV = _iv;
            using var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
            using var ms = new MemoryStream();
            using var cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write);
            using var sw = new StreamWriter(cs);
            sw.Write(input);
            cs.FlushFinalBlock();
            return Convert.ToBase64String(ms.ToArray());
        }

        public string Decrypt(string input)
        {
            using var aes = Aes.Create();
            aes.Key = _key;
            aes.IV = _iv;
            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            using var ms = new MemoryStream(Convert.FromBase64String(input));
            using var cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Read);
            using var sr = new StreamReader(cs);
            return sr.ReadToEnd();
        }
    }
}
    
- **Audit Logging**:
  - Configure Serilog in `Program.cs`:
    ```csharp
    builder.Host.UseSerilog((ctx, lc) => lc
        .WriteTo.Console()
        .WriteTo.File("logs/audit.log", rollingInterval: RollingInterval.Day));
    ```
  - Log PHI access in controllers (see `PatientsController` example).

#### 4.6 Testing
- **Unit Tests**:
  - Create tests in `TelehealthApi.Tests` using xUnit:
    - Test `FhirService` for patient/appointment CRUD.
    - Test encryption/decryption logic.
    - Test API endpoints with mock `FhirService`.
  - Example test:
    
using Moq;
using Xunit;
using Hl7.Fhir.Model;

namespace TelehealthApi.Tests
{
    public class FhirServiceTests
    {
        [Fact]
        public async Task GetPatientAsync_ReturnsPatient()
        {
            var mockFhirClient = new Mock<FhirClient>();
            mockFhirClient.Setup(c => c.ReadAsync<Patient>(It.IsAny<string>()))
                .ReturnsAsync(new Patient { Id = "123" });
            var service = new FhirService(mockFhirClient.Object);
            var result = await service.GetPatientAsync("123");
            Assert.Equal("123", result.Id);
        }
    }
}
    
- **Integration Tests**:
  - Test API endpoints against a local HAPI FHIR server.
  - Use Postman to verify FHIR resource creation/retrieval.

#### 4.7 Documentation
- **GitHub README**:
  - Include:
    - Project overview and healthcare problem solved (interoperability, telehealth access).
    - Setup instructions (e.g., HAPI FHIR, SQL Server, NuGet packages).
    - Architecture diagram (use draw.io for a visual).
    - Security measures (HIPAA compliance, encryption, audit logging).
    - API documentation via Swagger (auto-generated by ASP.NET Core).
  - Example README structure:
    
# FHIR-Integrated Secure Mini-Telehealth API and Patient Portal

## Overview
A secure, FHIR-compliant telehealth API and patient portal built with ASP.NET Core 8.0 and Blazor Server. Demonstrates healthcare interoperability, secure PHI handling, and real-time telehealth session management.

## Features
- **Patient Management**: CRUD operations for FHIR `Patient` resources.
- **Appointment Scheduling**: Schedule and manage FHIR `Appointment` resources.
- **Telehealth Sessions**: Secure session initiation with SignalR notifications.
- **Security**: HIPAA-compliant with AES-256 encryption, JWT authentication, and audit logging.
- **FHIR Integration**: Connects to HAPI FHIR server for interoperability.

## Setup
1. Clone the repository: `git clone <repo-url>`
2. Install SQL Server and create `TelehealthDb`.
3. Run HAPI FHIR server: `docker run -p 8080:8080 hapiproject/hapi:latest`
4. Update `appsettings.json` with connection strings and keys.
5. Run: `dotnet run --project TelehealthApi.Web`

## Architecture
- **Backend**: ASP.NET Core API with Entity Framework Core.
- **Frontend**: Blazor Server for patient portal.
- **Data**: SQL Server + HAPI FHIR.
- **Security**: ASP.NET Core Identity, JWT, AES-256, Serilog.

## Security Measures
- PHI encrypted at rest using AES-256.
- JWT-based API authentication.
- Audit logging for all PHI access.

## API Documentation
Run the API and access Swagger at `/swagger`.

## Future Enhancements
- Deploy to Azure Health Data Services.
- Add AI-driven appointment recommendations.
    

#### 4.8 Deployment (Optional for Portfolio)
- **Local Demo**: Run locally with `dotnet run` for `TelehealthApi.Web` and `TelehealthApi.Api`.
- **Cloud (Optional)**: Deploy to Azure App Service with Azure SQL Database for a live demo.
  - Configure Azure Health Data Services for FHIR if extending to cloud.

---

### 5. Timeline and Milestones
- **Week 1**: Set up solution, HAPI FHIR server, and SQL Server. Implement database schema and `TelehealthDbContext`.
- **Week 2**: Build `FhirService` and API endpoints for patient management. Test FHIR integration.
- **Week 3**: Implement appointment scheduling and telehealth session logic with SignalR.
- **Week 4**: Develop Blazor patient portal with authentication. Add security features (encryption, JWT).
- **Week 5**: Add audit logging and unit tests. Finalize documentation and GitHub README.
- **Week 6**: Test end-to-end, polish UI, and prepare for demo (local or cloud).

---

### 6. Collaboration Process
As your co-pilot, I’ll:
- Provide detailed code snippets and explanations for each component.
- Answer any questions as you implement, ensuring clarity on every step.
- Suggest optimizations or alternative approaches based on your feedback.
- Review your progress (if you share code or questions) to ensure alignment with healthcare IT best practices.

**Next Steps**:
1. Start by setting up the solution and HAPI FHIR server. Share any issues or questions as you go.
2. Let me know if you want to tweak any features (e.g., add video call integration, focus on specific FHIR resources).
3. I can provide additional code (e.g., for `AppointmentsController`, SignalR hub) or clarify any part of the spec.

This specification is designed to be a high-leverage portfolio piece that showcases your ASP.NET Core expertise, FHIR knowledge, and healthcare IT focus. It avoids vague “vibe coding” by providing granular steps, code, and reasoning. Let’s build this winner together—start with the setup, and I’ll be here to guide you through each phase! What’s your first step or question?

Updated Notes for Telehealth API Spec (PatientsController changes)

PatientModel (Core.Models)

This model now includes:

public string? Gender { get; init; }
[Required] public string PhoneNumber { get; init; } = "";

These fields are captured via the API and stored.

Although not mandatory in FHIR, they were added for internal clinical or contact requirements.

PatientsController (API)

Changes Reflected in Input DTOs:

public class PatientCreateRequest
{
    [Required] public string FirstName { get; set; } = "";
    [Required] public string LastName { get; set; } = "";
    [Required][RegularExpression("^\\d{4}-\\d{2}-\\d{2}$", ErrorMessage = "BirthDate must be in YYYY-MM-DD format.")]
    public string BirthDate { get; set; } = "";

    [EmailAddress] public string Email { get; set; } = "";
    public string? Gender { get; set; }

    [Required] public string PhoneNumber { get; set; } = "";
}

public class PatientUpdateRequest : PatientCreateRequest
{
    [Required] public string FhirPatientId { get; set; } = "";
}

These DTOs are used only for client input. Gender and PhoneNumber are mapped to the domain PatientModel in both the Create and Update endpoints.

User Context (Audit Logging):

var userId = User.FindFirstValue(ClaimTypes.NameIdentifier)
             ?? User.Identity?.Name ?? "Anonymous";

This improves accuracy by using the unique user identifier claim.

Used in all controller actions for patient-related audit logs.

No Other Spec Changes Needed

IPatientService and PatientService already handle these fields via PatientModel.

Database schema and audit logging logic already accommodate these changes.